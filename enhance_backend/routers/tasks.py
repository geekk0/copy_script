import logging
import subprocess

import httpx

from dotenv import load_dotenv
from fastapi import APIRouter, HTTPException
from tortoise.contrib.pydantic import pydantic_model_creator
from tortoise.exceptions import DoesNotExist
from os import environ
from bs4 import BeautifulSoup


from enhance_backend.models import StatusEnum, Client, Package, EnhanceTask
from enhance_backend.schemas import EnhanceTaskResponse, EnhanceTaskRequest, \
    EnhanceTaskUpdate, EnhanceTaskResponseWithDetails, ClientResponse
from enhance_backend.db_manager import DatabaseManager
from enhance_backend.notifications import ClientsBot
from clients_bot.utils import remove_task_folder
from enhance_backend.utils import logger

tasks_router = APIRouter(prefix="/tasks")

db_manager = DatabaseManager()
load_dotenv()


@tasks_router.get("")
async def get_clients_enhance_tasks(client_id: int)\
        -> list[EnhanceTaskResponseWithDetails]:
    try:
        tasks = await db_manager.get_clients_enhance_tasks(client_id)
        result = [
            EnhanceTaskResponseWithDetails(
                id=task.id,
                client=ClientResponse.model_validate(task.client, from_attributes=True),
                folder_path=task.folder_path,
                yclients_record_id=task.yclients_record_id,
                status=task.status,
                created_at=task.created_at.isoformat(),
                enhanced_files_count=task.enhanced_files_count,
                files_list=task.files_list or [],
                yclients_certificate_code=task.yclients_certificate_code,
                max_photo_amount=task.max_photo_amount,
                selected_action=task.selected_action
            )
            for task in tasks
        ]
        return result

    except DoesNotExist:
        raise HTTPException(status_code=404, detail="Client not found")
    except Exception as e:
        logger.error(e)
        raise HTTPException(status_code=500, detail=str(e))


@tasks_router.get("/demo")
async def check_demo_task_exists(client_chat_id: int) -> EnhanceTaskResponse:
    try:
        client = await Client.get(chat_id=client_chat_id)
        task = await EnhanceTask.get_or_none(price=0, client_id=client.id)
        return task

    except Exception as e:
        logger.error(e)
        raise HTTPException(status_code=500, detail=str(e))


@tasks_router.post("")
async def add_task(task_data: EnhanceTaskRequest) -> EnhanceTaskResponse:
    try:
        task = await db_manager.add_enhance_task(task_data.client_chat_id, task_data)
        return task
    except DoesNotExist:
        raise HTTPException(status_code=404, detail="Client not found")
    except Exception as e:
        logger.error(e)
        raise HTTPException(status_code=500, detail=str(e))


@tasks_router.patch("")
async def update_task(task_id: int, task_data: EnhanceTaskUpdate) -> EnhanceTaskResponse:
    try:
        update_data = task_data.model_dump(exclude_unset=True)
        task = await db_manager.update_enhance_task(task_id, update_data)
        return EnhanceTaskResponse.model_validate(task)
    except DoesNotExist:
        raise HTTPException(status_code=404, detail="Task not found")
    except Exception as e:
        logger.error(e)
        raise HTTPException(status_code=500, detail=str(e))


@tasks_router.patch("/status")
async def change_task_status(task_id: int, status: str):
    try:
        status_enum = get_status_enum_by_value(status)

        logger.debug(f'status_enum: {status_enum}')
        task_update_data = (
            EnhanceTaskUpdate(status=status_enum).model_dump(exclude_unset=True)
        )
        await db_manager.update_enhance_task(task_id, task_update_data)
    except DoesNotExist:
        raise HTTPException(status_code=404, detail="Task not found")
    except Exception as e:
        logger.error(e)
        raise HTTPException(status_code=500, detail=str(e))


@tasks_router.patch("/status/change")
async def change_task_status(cert_number: str, status: str):
    try:
        status_enum = get_status_enum_by_value(status)

        logger.debug(f'status_enum: {status_enum}')
        task_update_data = (
            EnhanceTaskUpdate(status=status_enum).model_dump(exclude_unset=True)
        )
        task = await db_manager.get_enhance_task_by_cert(cert_number)
        await db_manager.update_enhance_task(task.id, task_update_data)
    except DoesNotExist:
        raise HTTPException(status_code=404, detail="Task not found")
    except Exception as e:
        logger.error(e)
        raise HTTPException(status_code=500, detail=str(e))


@tasks_router.delete("")
async def remove_task(task_id: int) -> dict[str, str]:
    try:
        await db_manager.remove_enhance_task(task_id)
        return {"message": "Task removed successfully"}
    except DoesNotExist:
        raise HTTPException(status_code=404, detail="Task not found")
    except Exception as e:
        logger.error(e)
        raise HTTPException(status_code=500, detail=str(e))


@tasks_router.post("/completed")
async def task_is_completed(task_data: dict) -> None:
    cert_number = task_data.get('cert_number')
    try:
        task = await db_manager.get_enhance_task_by_cert(cert_number)
        client = await task.client.first()
        folder_path = task.folder_path
        actual_folder = f'{folder_path}_task_{str(task.yclients_certificate_code)}_AI'
        client_chat_id = client.chat_id
        task_update_data = (
            EnhanceTaskUpdate(status=StatusEnum.COMPLETED).model_dump(exclude_unset=True)
        )
        await db_manager.update_enhance_task(task.id, task_update_data)

        folder_link = await share_folder(actual_folder)
        logger.debug(f"folder_link: {folder_link}")

        clients_bot = ClientsBot()
        logger.debug(f"chat_id: {client_chat_id}")
        text = f'''
        –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –≠—Ç–æ –∫–æ–º–∞–Ω–¥–∞ —Å—Ç—É–¥–∏–∏ –∞–≤—Ç–æ–ø–æ—Ä—Ç—Ä–µ—Ç–∞ Reflect

        üì∏–í–∞—à–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∏ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø–æ —Å—Å—ã–ª–∫–µ: \n {folder_link}
        
        
        üìå–ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥–æ–∂–¥–∞—Ç—å –¥–æ–ª—å—à–µ –∏–ª–∏ –∑–∞–π–¥–∏—Ç–µ –ø–æ–∑–∂–µ, –≤–æ–∑–º–æ–∂–Ω–∞ –±–æ–ª—å—à–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä. 
        
        üìÉ–í–æ—Ç –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∫–∞–∫ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, —á—Ç–æ–±—ã –Ω–µ —Ç–µ—Ä—è–ª–æ—Å—å –∫–∞—á–µ—Å—Ç–≤–æ:
        
        https://reflect-studio.ru/howtosavereflect
        
        ‚ùóÔ∏è–°–°–´–õ–ö–ê –ê–ö–¢–ò–í–ù–ê –í –¢–ï–ß–ï–ù–ò–ò 7 –î–ù–ï–ô. 
        –£—Å–ø–µ–π—Ç–µ —Å–∫–∞—á–∞—Ç—å –≤–∞—à–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –ø–æ—Å–ª–µ 7 –¥–Ω–µ–π —Å–µ—Ä–≤–µ—Ä —á–∏—Å—Ç–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, —Ñ–æ—Ç–æ –±—É–¥—É—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.
        
        üìç–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –±–ª–∏–∑–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∫–∞–¥—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é. –≠—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤ —Å–∞–º–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–µ –∏–ª–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Picsart –∏–ª–∏ Peachy üì∏
        
        üôåüèª–ë—É–¥–µ–º —Ä–∞–¥—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∏ –≤–∞—à–∏–º –æ—Ç–º–µ—Ç–∫–∞–º –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö:
        
        https://t.me/reflect_foto
         https://instagram.com/reflect.foto?igshid=MmIzYWVlNDQ5Yg==
        
        ‚ù§Ô∏è–ï—Å–ª–∏ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∞—Ä–∏—Ç—å —ç—Ç–æ—Ç –æ–ø—ã—Ç —Å–≤–æ–∏–º –±–ª–∏–∑–∫–∏–º, —Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –ø–æ–¥–∞—Ä–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç - –∑–∞–∫–∞–∑–∞—Ç—å –º–æ–∂–Ω–æ —Ç—É—Ç¬†https://o2881.yclients.com/loyalty
                '''
        await clients_bot.send_notification(client_chat_id, text)
        # await remove_task_folder(folder_path)

    except DoesNotExist:
        raise HTTPException(status_code=404, detail="Task not found")
    except Exception as e:
        logger.error(e)
        raise HTTPException(status_code=500, detail=str(e))


async def share_folder(folder_path: str) -> str:
    try:
        actual_folder_path = folder_path.replace('/cloud/reflect/files/', '')
        url = "https://cloud.reflect-studio.ru/ocs/v2.php/apps/files_sharing/api/v1/shares"
        body = {
            "path": actual_folder_path,
            "shareType": "3",
            "permissions": "1"
        }
        headers = {
            "OCS-APIRequest": "true"
        }
        username = environ.get('NEXTCLOUD_USERNAME')
        password = environ.get('NEXTCLOUD_PASSWORD')
        async with httpx.AsyncClient() as client:
            response = await client.post(
                url,
                data=body,
                headers=headers,
                auth=(username, password)
            )

            if response.status_code != 200:
                logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {response.status_code}, —Ç–µ–∫—Å—Ç: {response.text}")
                return ""

            soup = BeautifulSoup(response.text, "lxml-xml")
            link = soup.find("url")  # –ò—â–µ–º —Ç–µ–≥ <url> –≤ XML

            if link:
                folder_link = link.text.strip()  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∏–∑ —Ç–µ–≥–∞ <url>
                logger.debug(f"folder_link: {folder_link}")  # –ü–µ—á–∞—Ç–∞–µ–º —á–∏—Å—Ç—É—é —Å—Å—ã–ª–∫—É
                return folder_link
            else:
                logging.error("URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞")
                return ""
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ share_folder: {e}")


def get_status_enum_by_value(value: str) -> StatusEnum:
    for item in StatusEnum:
        if item.value == value:
            return item
    raise HTTPException(status_code=400, detail=f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞: {value}")
